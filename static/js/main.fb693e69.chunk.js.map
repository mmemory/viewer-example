{"version":3,"sources":["Pspdfkit.js","Pdftron.js","App.js","serviceWorker.js","index.js"],"names":["Pspdfkit","viewerContainer","useRef","useState","_instance","changeInstance","useEffect","pdfContainer","current","PSPDFKIT","load","container","pdf","licenseKey","then","instance","console","log","catch","err","error","message","unload","ref","className","Pdftron","NavLink","props","getProps","isCurrent","App","to","path","default","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAIO,SAASA,IACd,IAAMC,EAAkBC,iBAAO,MADN,EAEWC,mBAAS,MAFpB,mBAElBC,EAFkB,KAEPC,EAFO,KAwBzB,OAnBAC,qBAAU,WACR,IAAMC,EAAeN,EAAgBO,QAarC,OAZAC,IAASC,KAAK,CACZC,UAAWJ,EACXK,IAAK,4BACLC,WAAY,qcACXC,MAAK,SAAAC,GACNV,EAAeU,GACfC,QAAQC,IAAI,SAAUF,MACrBG,OAAM,SAAAC,GAEPH,QAAQI,MAAMD,EAAIE,YAGb,WACLZ,IAASa,OAAOf,GAAgBH,OAKlC,yBAAKmB,IAAKtB,EAAiBuB,UAAU,WC1BlC,SAASC,IACd,OACE,wCCkBJ,IAAMC,EAAU,SAAAC,GAAK,OACnB,kBAAC,IAAD,iBAAUA,EAAV,CAAiBC,SAAU,kBAAkB,CAC3CJ,UADyB,EAAEK,UACJ,SAAW,SAIvBC,EAvBf,WACE,OACE,6BACE,6BACE,kBAAC,EAAD,CAASC,GAAG,KAAZ,YACA,kBAAC,EAAD,CAASA,GAAG,YAAZ,YAEF,yBAAKP,UAAU,WACb,kBAAC,IAAD,KACE,kBAACxB,EAAD,CAAUgC,KAAK,IAAIC,SAAO,IAC1B,kBAACR,EAAD,CAASO,KAAK,iBCJJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAE,GACLJ,QAAQI,MAAMA,EAAMC,c","file":"static/js/main.fb693e69.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport PSPDFKIT from 'pspdfkit';\n\nexport function Pspdfkit() {\n  const viewerContainer = useRef(null);\n  const [_instance, changeInstance] = useState(null);\n\n\n  useEffect(() => {\n    const pdfContainer = viewerContainer.current;\n    PSPDFKIT.load({\n      container: pdfContainer,\n      pdf: '124.05.Project.Rubric.pdf',\n      licenseKey: \"fOZcOqom69UCrBT5NiEGda4qJ5HDQzaB3xK_8Wvp4T8W54mwPLl1QRIivfJq_yDtLJGNFC3D77KPY4ySmHG_CCDJHJZemIFFoJl8yXzBYniSIuu4biRdojJuymAkER4Zs17OOFGW_2VEKsap5xyUakSJVvREtIGClnyr08aNJWgkM9wtxYvnzfsCyWV379nEaG99Jt9jDMlP2_JMRh4gswt75vevSpaVcknSJpDzufQaY30wTn8buHOaQrmeWQxegPr2YDxCWwDiCpKX8ig63BiiwuT93dwSTLMDaKXkLnv0I-3JRAcj5AWFZnJWiZF4XwQqR8Kp8n17VZrDEak1PM8WQwTPWxQaVTwlTfR8a7FNdE3L9_t51Sfu11oczm1W_zC2cPy-Ea6xAQpO-PILvC9KYGmMJIe_G-Y1--WsnDOgWXesGQIPdmMrxWtNJhbY\"\n    }).then(instance => {\n      changeInstance(instance)\n      console.log('LOADED', instance)\n    }).catch(err => {\n      debugger\n      console.error(err.message);\n    })\n\n    return function() {\n      PSPDFKIT.unload(pdfContainer || _instance)\n    }\n  });\n\n  return (\n    <div ref={viewerContainer} className=\"viewer\"/>\n  );\n}\n","import React from 'react';\nimport './App.css';\n\nexport function Pdftron() {\n  return (\n    <div>\n      PDFTron\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Router, Link } from \"@reach/router\";\nimport {Pspdfkit} from './Pspdfkit';\nimport {Pdftron} from './Pdftron';\n\nfunction App() {\n  return (\n    <div>\n      <nav>\n        <NavLink to=\"/\">PSPDFKIT</NavLink>\n        <NavLink to=\"/pdftron\">PDFTron</NavLink>\n      </nav>\n      <div className=\"content\">\n        <Router>\n          <Pspdfkit path=\"/\" default />\n          <Pdftron path=\"/pdftron\" />\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nconst NavLink = props => (\n  <Link {...props} getProps={({isCurrent}) => ({\n    className: isCurrent ? \"active\" : \"\"\n  })}/>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}